name: Security SAST scan

on:
  workflow_call:
    inputs:
      is-blocking:
          description: |
            Determines whether the workflow should block execution if vulnerabilities are found.
            Set to "false" to allow the workflow to continue despite detected vulnerabilities.
            Example:
              is-blocking: true || is-blocking: false
          required: false
          type: boolean
          default: true

      security-level:
        description: |
          Severities of vulnerabilities to scan and display:

          For a minimal security level, remove at least the highest severity vulnerabilities from your codebase.
          For a maximal security level, eliminate all vulnerabilities.

          This choice should be guided by the CIA triad (Confidentiality, Integrity, Availability)
          based on your product‚Äôs risk assessment.

          By default, you can start with MIN to identify the most critical vulnerabilities.
          The workflow operates with three security levels:
            ‚Ä¢	MAX ‚Üí Detects all vulnerabilities
            ‚Ä¢	MEDIUM ‚Üí Detects HIGH and MEDIUM vulnerabilities
            ‚Ä¢	MIN ‚Üí Detects only HIGH vulnerabilities

          Example:
            security-level: MAX || security-level: MEDIUM || security-level: MIN
        required: false
        type: string
        default: "MAX"

jobs:
  semgrep: 
    runs-on: self-hosted
    permissions:
      id-token: write
      contents: read
      security-events: write
      actions: read
    
    steps:
      - name: üß™ List files 1
        run: ls -la

      - name: üì• Checkout du code
        uses: actions/checkout@v4

      - name: üß™ List files 2
        run: ls -la

      - name: üß™ check python version
        run: python3 --version

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: üß™ check python version
        run: python3 --version

      - name: üì¶ Install semgrep and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install semgrep
          semgrep --version
      
      - name: üÜî Generate unique and random string for unique file naming
        run: echo "UNIQ_STR=$(head /dev/urandom | tr -dc 'a-zA-Z0-9' | head -c 30)" >> "$GITHUB_ENV"

      - name: üöÄü™≤ Run semgrep for scan low vulnerabilities levels and add severity result in report
        continue-on-error: ${{ ! (inputs.is-blocking == true) }}
        if: ${{ contains(fromJson('["MAX"]'), inputs.security-level) }}
        run: |
          semgrep --config=auto . \
            --sarif --sarif-output="output-${UNIQ_STR}-info.json" --severity=INFO

          jq '.runs[].results[] |= (.properties["security-severity"] = "1.0")' \
            "output-${UNIQ_STR}-info.json" > "output-${UNIQ_STR}-info.sarif"

      - name: üöÄü™≤ü™≤ Run semgrep for scan medium vulnerabilities levels and add severity result in report
        continue-on-error: ${{ ! (inputs.is-blocking == true) }}
        if: ${{ contains(fromJson('["MAX", "MEDIUM"]'), inputs.security-level) }}
        run: |
          semgrep --config=auto . \
            --sarif --sarif-output="output-${UNIQ_STR}-warning.json" --severity=WARNING

          jq '.runs[].results[] |= (.properties["security-severity"] = "5.0")' \
            "output-${UNIQ_STR}-warning.json" > "output-${UNIQ_STR}-warning.sarif"

      - name: üöÄü™≤ü™≤ü™≤ Run semgrep for scan high vulnerabilities levels and add severity result in report
        continue-on-error: ${{ ! (inputs.is-blocking == true) }}
        if: ${{ contains(fromJson('["MAX", "MEDIUM", "MIN"]'), inputs.security-level) }}
        run: |
          semgrep --config=auto . \
            --sarif --sarif-output="output-${UNIQ_STR}-error.json" --severity=ERROR

          jq '.runs[].results[] |= (.properties["security-severity"] = "7.0")' \
            "output-${UNIQ_STR}-error.json" > "output-${UNIQ_STR}-error.sarif"
      
      - name: üîÑ Count and store vuln
        run: |
          jq '.runs[0].results | length' output-${UNIQ_STR}.json > vuln_count.txt
          VULN_COUNT=$(cat ./vuln_count.txt)
          echo "Nombre de vuln√©rabilit√©s d√©tect√©es : $VULN_COUNT"
          echo "VULN_COUNT=$VULN_COUNT" >> $GITHUB_ENV

      - name: ‚úÖ V√©rification du r√©sultat de l‚Äôanalyse
        run: |
          if [ "${VULN_COUNT}" -gt 0 ]; then
            echo "‚ùå ${VULN_COUNT} vuln√©rabilit√©s d√©tect√©es. CI bloqu√©e."
          else
            echo "‚úÖ Aucune vuln√©rabilit√© d√©tect√©e. CI valid√©e."
          fi
      
      - name: PASS or FAIL
        if: ${{ inputs.is-blocking == true }}
        run: |
          if [ "${VULN_COUNT}" -gt 0 ]; then
            exit 1